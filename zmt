#purpose is to get the complete log transaction of zmt on etherscan
#
#limitation
##1-using free api which limit 1000 row
##2-having list index error
##3-need to enhance for ZMT interaction on gate.io, swap... eg 0xe93f62dad69daa69dae312e649b7e5ae6e9aeda917f100798f07f889acc8a604
##4-need to remove this from report for approval step eg 0x917fdbccb410f5825bbe1eca347036a247cae20ad25713ab5d4cf6c18f1e00b6
#
#ref from youtube https://www.youtube.com/watch?v=x5FHbr0Em5A
#
#note: 
##for transaction use topic = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
##for approval transacting on other platform use topic = 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925

from requests import get
import pprint
from datetime import datetime
import pandas as pd
import json
pd.io.json._json.loads = lambda s, *a, **kw: json.loads(s)

API_KEY = "ENTERyourKEY"
zmt_address = "0xaa602dE53347579f86b996D2Add74bb6F79462b2"
BASE_URL = "https://api.etherscan.io/api"
ETHER_VALUE = 10**18

# INPUT BLOCK VALUE HERE
depart_block = 15937869
arrival_block = 16072573

def make_api_url(module, action, address, fromBlock, toBlock, **kwargs):
    url = BASE_URL + f"?module={module}&action={action}&address={address}&fromBlock={fromBlock}&toBlock={toBlock}&apikey={API_KEY}"

    for key, value in kwargs.items():
        url +=f"&{key}={value}"

    return url

# print (make_api_url ("logs", "getLogs", address=zmt_address, fromBlock= depart_block, toBlock=arrival_block))

from ast import literal_eval
#
def get_logs():
    get_log_url = make_api_url ("logs", "getLogs", address=zmt_address, fromBlock= depart_block, toBlock=arrival_block)
    response = get(get_log_url)
    data = response.json()["result"]

    created_at = []
    zmt_k_address = []
    topic = []
    from_address = []
    to_address = []
    zmt_amt = []
    transactionHash = []
    blockNumber = []

    get_log_dict = {'created_at':created_at,'zmt_k_address':zmt_k_address,'topic':topic, 'from_address':from_address,'to_address':to_address,'zmt_amount':zmt_amt
                    ,'transactionHash':transactionHash,'blockNumber':blockNumber}

    for lg in data:
        created_a = datetime.utcfromtimestamp(int(lg["timeStamp"],16))
        # time= datetime.fromtimestamp(lg['timeStamp'])
        zmt_k_a = lg["address"]
        topi = lg["topics"][0]
        from_add = lg["topics"][1]
        to_add = lg["topics"][2]
        if lg["data"] == '0x':
            zmt_a = 0.000000000000000001
        else:
            zmt_a = literal_eval(lg["data"]) / ETHER_VALUE
        transactionH=lg["transactionHash"]
        blockN= lg["blockNumber"]

        created_at.append(created_a)
        zmt_k_address.append(zmt_k_a)
        topic.append(topi)
        from_address.append(from_add)
        to_address.append(to_add)
        zmt_amt.append(zmt_a)
        transactionHash.append(transactionH)
        blockNumber.append(blockN)

    y=json.dumps(get_log_dict, indent=4, sort_keys=False, default=str)
    return y

# convert to pandas
logs_df = pd.read_json(get_logs())

# print(type(logs_df.data))

# NEED to add a condition when address length <>40
logs_df['length_from_address'] = logs_df['from_address'].str.len()
logs_df['length_to_address'] = logs_df['to_address'].str.len()
logs_df['from_address_use'] = '0x'+ logs_df['from_address'].str[-40:].astype(str)
logs_df['to_address_use'] = '0x' + logs_df['to_address'].str[-40:].astype(str)
logs_df['blockNumber'] = logs_df['blockNumber'].apply(int, base = 16)

# print(logs_df.blockNumber)

logs_df.to_csv('log_df_9.csv')
